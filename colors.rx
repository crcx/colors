( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, 2012,  Charles Childers               )
( License: ISC                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )

needs console'
with console'

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Remap 'bye' to reset the colors before exiting.           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
[ normal default: bye ] is bye


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Handle the actions associated with each color             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: help
  normal red     "`1 - Create a name\n" puts
  normal green   "`2 - Execute or compile a word\n" puts
  normal blue    "`3 - Push or compile a pointer\n" puts
  normal magenta "`4 - Execute a word immediately\n" puts
  normal black   "`5 - Comments\n" puts
  bold   black   "`6 - Start/stop compiler\n\n" puts ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( colorRetro main code                                      )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  ( This is a dummy class for comments                        )
  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : .nope ( a- ) drop ;

  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  ( Each color maps to an action or class                     )
  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  variable current
  : bold? @compiler [ bold ] [ normal ] if ;
  : colorize
    [ '1 = ] [ bold? red      create green &.word !current ] whend
    [ '2 = ] [ bold? green    &.word  !current ] whend
    [ '3 = ] [ bold? blue     &.data  !current ] whend
    [ '4 = ] [ bold? magenta  &.macro !current ] whend
    [ '5 = ] [ bold? black    &.nope  !current ] whend
    [ '6 = ] [ @compiler not !compiler ] whend
    drop ;

  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  ( Catch color sequences and call the color handler word     )
  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  : check dup '` = [ drop getc colorize getc ] ifTrue ;
  &check is remapKeys

  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  ( The colorRetro listener                                   )
  ( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
  variable flag
  : word?
    tib find [ @d->xt @current withClass flag off ] [ drop ] if ;
  : error?
    @flag 0; @current &.nope <> [ "Word not found!\n" puts ] ifTrue ;
  : number?
    tib isNumber? 0; drop flag off tib toNumber .data ;
  : interpret
    repeat flag on 32 accept word? number? error? again ;
---reveal---
  : colors clear help &.word !current normal green interpret ;
}}

without

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Start colorRetro                                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
colors

