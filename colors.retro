( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Copyright [c] 2009, Charles Childers                      )
( License: ISC                                              )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Define words to display colors. This is from the Retro    )
( library: contrib/terminal-colors.retro                    )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
{{
  : ESC$ ( $- ) 27 emit type ;
---reveal---
  : black    s" [30m" ESC$ ;   : onBlack    s" [40m" ESC$ ;
  : red      s" [31m" ESC$ ;   : onRed      s" [41m" ESC$ ;
  : green    s" [32m" ESC$ ;   : onGreen    s" [42m" ESC$ ;
  : yellow   s" [33m" ESC$ ;   : onYellow   s" [43m" ESC$ ;
  : blue     s" [34m" ESC$ ;   : onBlue     s" [44m" ESC$ ;
  : magenta  s" [35m" ESC$ ;   : onMagenta  s" [45m" ESC$ ;
  : cyan     s" [36m" ESC$ ;   : onCyan     s" [46m" ESC$ ;
  : white    s" [37m" ESC$ ;   : onWhite    s" [47m" ESC$ ;
  : normal s" [0m" ESC$ ;      : bold s" [1m" ESC$ ;
}}

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Remap 'bye' to reset the colors before exiting.           )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
' bye : bye normal [ compile ] ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Handle the actions associated with each color             )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: help
  normal red     ." `1 - Create a name" cr
  normal green   ." `2 - Execute or compile a word" cr
  normal blue    ." `3 - Push or compile a pointer" cr
  normal magenta ." `4 - Execute a word immediately" cr
  normal black   ." `5 - Comments" cr
  bold   black   ." `6 - Start/stop compiler" cr cr
;

( This is a dummy class for comments )
: .nope ( a- ) drop ;

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Each color maps to an action or class                     )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable current
: bold? compiler @ if bold ;then normal ;
: colorize
  dup 49 =if bold? red create green ['] .word current ! ;then
  dup 50 =if bold? green ['] .word current ! ;then
  dup 51 =if bold? blue  ['] .data current ! ;then
  dup 52 =if bold? magenta ['] .macro current ! ;then
  dup 53 =if bold? black ['] .nope current ! ;then
  dup 54 =if compiler @ not compiler ! ;then
  drop
;

( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Custom key remapper to trap the color prefix codes        )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: check dup 96 =if drop key colorize key ;then ;
' check is (remap-keys)


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( A Forth Interpreter                                       )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
variable flag
: word?
  tib find 0 !if d->xt @ current @ with-class flag off ;then drop ;
: error?
  flag @ 0; current @ ['] nope !if ." Word not found!" cr then ;
: number?
  tib isNumber? 0; drop flag off tib >number .data ;
: interpret
  repeat flag on 32 accept word? number? error? again ;


( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
( Start colorRetro                                          )
( ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ )
: colors clear help ['] .word current ! normal green interpret ;
' colors is boot
colors
